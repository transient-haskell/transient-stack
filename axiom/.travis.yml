# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  timeout: 1000
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $HOME/.local/bin
  - $HOME/.ghcjs


# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  # Run longest jobs first.
  include:
  # Build on OS X in addition to Linux
  - env: BUILD=stack ARGS="--resolver lts-7"
    compiler: ": #stack 8.0.1 LTS 7 (OS X)"
    os: osx

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS="--resolver lts-7"
    compiler: ": #stack 8.0.1 LTS 7"
    addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}
  - env: BUILD=stack ARGS="--resolver lts-6"
    compiler: ": #stack 7.10.3 LTS 6"
    addons: {apt: {packages: [ghc-7.10.3], sources: [hvr-ghc]}}
  - env: BUILD=stack ARGS="--resolver lts-5"
    compiler: ": #stack 7.10.3 LTS 5"
    addons: {apt: {packages: [ghc-7.10.3], sources: [hvr-ghc]}}
  - env: BUILD=stack ARGS="--resolver lts-3"
    compiler: ": #stack 7.10.2 LTS 3"
    addons: {apt: {packages: [ghc-7.10.2], sources: [hvr-ghc]}}
    
  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  # GHCJS build via stack
  - env: BUILD=ghcjs ARGS="--stack-yaml=stack-ghcjs.yaml"
    compiler: ": #stack GHCJS"
    addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}

  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis
  - env: BUILD=cabal GHC=8.0.1 CABAL=1.24
    compiler: ": #GHC 8.0.1"
    addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.1], sources: [hvr-ghc]}}
  - env: BUILD=cabal GHC=7.10.3 CABAL=1.22
    compiler: ": #GHC 7.10.3"
    addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.3], sources: [hvr-ghc]}}
  - env: BUILD=cabal GHC=7.10.2 CABAL=1.22
    compiler: ": #GHC 7.10.2"
    addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.2], sources: [hvr-ghc]}}
  # Build with the newest GHC and cabal-install. This is an accepted failure,
  # see below.
  - env: BUILD=cabal GHCVER=head  CABALVER=head
    compiler: ": #GHC HEAD"
    addons: {apt: {packages: [cabal-install-head,ghc-head], sources: [hvr-ghc]}}

  allow_failures:
  - env: BUILD=ghcjs ARGS="--stack-yaml=stack-ghcjs.yaml"
  - env: BUILD=cabal GHCVER=head  CABALVER=head
  - env: BUILD=stack ARGS="--resolver nightly"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [[ "x$GHC" = "xhead" ]]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHC/bin:$HOME/.local/bin:/opt/cabal/$CABAL/bin:$PATH
- mkdir -p $HOME/.local/bin

# GHC itself is being installed as apt addon already.
- |
  case "$BUILD" in
    stack)
    # Stack Installation
      echo "Installing Stack."
      if [[ `uname` = "Darwin" ]]; then
        curl --insecure -L https://www.stackage.org/stack/osx-x86_64 \
        | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
      else
        curl -L https://www.stackage.org/stack/linux-x86_64 \
        | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
      fi
      ;;
    cabal)
    # Update Cabal packages data
      echo "Updating Cabal index"
      cabal --version
      travis_retry cabal update
      ;;
  esac




install:
- |
  echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  if [[ -f configure.ac ]]; then autoreconf -i; fi

- |
  echo "Building dependencies."
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS test --install-ghc --only-dependencies
      ;;
    cabal)
      cabal install --only-dependencies  --enable-benchmarks \
      --force-reinstalls --ghc-options=-O0 --reorder-goals \
      --max-backjumps=-1 $CABALARGS
      ;;
  esac

script:
- |
  case "$BUILD" in
    stack)
      stack --no-terminal test $ARGS
      stack --no-terminal haddock --no-haddock-deps $ARGS
      ;;
    cabal)
      cabal configure  --enable-benchmarks -v2 --ghc-options="-O0 -Werror"
      cabal build
      cabal check || [[ "$CABAL" == "1.16" ]]
      cabal test
      cabal sdist
      cabal copy
      SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz && \
      (cd dist && cabal install --force-reinstalls "$SRC_TGZ")
      ;;
  esac
